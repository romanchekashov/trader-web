import {
  createSlice,
  createAsyncThunk,
  PayloadAction,
  createSelector,
} from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { getNews } from "../../common/api/rest/newsRestApi";
import { NewsItem } from "../../common/data/news/NewsItem";
import { NewsProvider } from "../../common/data/news/NewsProvider";

export interface NewsState {
  news: NewsItem[];
  status: "idle" | "loading" | "failed";
}

const initialState: NewsState = {
  news: [],
  status: "idle",
};

// https://www.newline.co/@bespoyasov/how-to-use-thunks-with-redux-toolkit-and-typescript--1e65fc64
export const fetchNews = createAsyncThunk<
  NewsItem[],
  { provider?: NewsProvider; secId?: number }
>("news/fetch", async ({ provider, secId }) => {
  const response = await getNews(provider, secId);
  return response;
});

export const newsSlice = createSlice({
  name: "news",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [fetchNews.fulfilled as any]: (
      state: NewsState,
      action: PayloadAction<NewsItem[]>
    ) => {
      state.news = action.payload;
    },
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNews = createSelector(
  (state: RootState) => ({
    news: state.news.news,
  }),
  (state) => state
);

export default newsSlice.reducer;
