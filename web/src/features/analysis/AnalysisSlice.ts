import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { LoadingState } from "../../app/LoadingState";
import { handleThunkError } from "../../app/reduxUtils";
import { RootState } from "../../app/store";
import botControlRestApi from "../../common/api/rest/botControlRestApi";
import { MarketBotFilterDataDto } from "../../common/data/bot/MarketBotFilterDataDto";
import { SecurityCurrency } from "../../common/data/security/SecurityCurrency";
import { SecurityFuture } from "../../common/data/security/SecurityFuture";
import { SecurityShare } from "../../common/data/security/SecurityShare";

export interface AnalysisState {
  filter?: MarketBotFilterDataDto;
  filterLoading: LoadingState;
  filterLoadingError?: string;
  shares: SecurityShare[];
  currencies: SecurityCurrency[];
  futures: SecurityFuture[];
}

export const initialState: AnalysisState = {
  filterLoading: LoadingState.IDLE,
  shares: [],
  currencies: [],
  futures: [],
};

export const loadFilterData = createAsyncThunk<MarketBotFilterDataDto, boolean>(
  "analysis/loadFilterData",
  async (history, thunkAPI) =>
    await handleThunkError(thunkAPI, botControlRestApi.getFilterData(history))
);

export const analysisSlice = createSlice({
  name: "analysis",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadFilterData.pending as any]: (state: AnalysisState) => {
      state.filter = undefined;
      state.filterLoading = LoadingState.LOADING;
    },
    [loadFilterData.fulfilled as any]: (
      state: AnalysisState,
      action: PayloadAction<MarketBotFilterDataDto>
    ) => {
      state.filter = action.payload;
      state.filterLoading = LoadingState.LOADED;
    },
    [loadFilterData.rejected as any]: (
      state: AnalysisState,
      action: PayloadAction<any>
    ) => {
      state.filterLoadingError = action.payload;
      state.filterLoading = LoadingState.ERROR;
    },
  },
});

export const selectFilter = createSelector(
  (state: RootState) => ({
    filter: state.analysis.filter,
    filterLoading: state.analysis.filterLoading,
    filterLoadingError: state.analysis.filterLoadingError,
  }),
  (state) => state
);

export const selectAnalysis = createSelector(
  (state: RootState) => ({
    shares: state.analysis.shares,
    currencies: state.analysis.currencies,
    futures: state.analysis.futures,
  }),
  (state) => state
);

export default analysisSlice.reducer;
