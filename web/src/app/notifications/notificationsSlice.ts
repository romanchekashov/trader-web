import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { NotificationDto } from "../../common/components/notifications/data/NotificationDto";
import { FilterDto } from "../../common/data/FilterDto";
import { LoadingState } from "../LoadingState";
import { handleThunkError } from "../reduxUtils";
import { RootState } from "../store";
import notificationsRestApi from "./notificationsApi";

export interface NotificationsState {
  notifications: NotificationDto[];
  notificationsLoading: LoadingState;
  notificationsLoadingError?: string;
}

export const initialState: NotificationsState = {
  notifications: [],
  notificationsLoading: LoadingState.IDLE,
};

export const loadNotifications = createAsyncThunk<NotificationDto[], FilterDto>(
  "notifications/loadNotifications",
  async (filter, thunkAPI) =>
    await handleThunkError(
      thunkAPI,
      notificationsRestApi.getNotifications(filter)
    )
);

export const notificationsSlice = createSlice({
  name: "notifications",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setNotifications: (
      state,
      { payload }: PayloadAction<NotificationDto[]>
    ) => {
      state.notifications = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadNotifications.pending as any]: (state: NotificationsState) => {
      // state.futuresClientLimits = [];
      state.notificationsLoading = LoadingState.LOADING;
    },
    [loadNotifications.fulfilled as any]: (
      state: NotificationsState,
      action: PayloadAction<NotificationDto[]>
    ) => {
      state.notifications = action.payload;
      state.notificationsLoading = LoadingState.LOADED;
    },
    [loadNotifications.rejected as any]: (
      state: NotificationsState,
      action: PayloadAction<any>
    ) => {
      state.notificationsLoadingError = action.payload;
      state.notificationsLoading = LoadingState.ERROR;
    },
  },
});

export const { setNotifications } = notificationsSlice.actions;

export const selectNotifications = createSelector(
  (state: RootState) => ({
    notifications: state.notifications.notifications,
    notificationsLoading: state.notifications.notificationsLoading,
    notificationsLoadingError: state.notifications.notificationsLoadingError,
  }),
  (state) => state
);

export default notificationsSlice.reducer;
