import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { CalendarType } from "../../common/data/news/CalendarType";
import { EconomicCalendarEvent } from "../../common/data/news/EconomicCalendarEvent";
import { NewsItem } from "../../common/data/news/NewsItem";
import { NewsProvider } from "../../common/data/news/NewsProvider";
import { LoadingState } from "../LoadingState";
import { handleThunkError } from "../reduxUtils";
import { RootState } from "../store";
import newsApi from "./newsApi";

export interface NewsState {
  news: NewsItem[];
  newsLoading: LoadingState;
  newsLoadingError?: string;

  economicCalendarEvents: EconomicCalendarEvent[];
  economicCalendarEventsLoading: LoadingState;
  economicCalendarEventsLoadingError?: string;
}

const initialState: NewsState = {
  news: [],
  newsLoading: LoadingState.IDLE,
  economicCalendarEvents: [],
  economicCalendarEventsLoading: LoadingState.IDLE,
};

// https://www.newline.co/@bespoyasov/how-to-use-thunks-with-redux-toolkit-and-typescript--1e65fc64
export const loadNews = createAsyncThunk<NewsItem[], { provider?: NewsProvider; secId?: number }>(
  "news/loadNews",
  async ({ provider, secId }, thunkAPI) =>
    await handleThunkError(thunkAPI, newsApi.getNews(provider, secId))
);

export const loadEconomicCalendarEvents = createAsyncThunk<EconomicCalendarEvent[], { start: string, calendarType?: CalendarType, secId?: number }>(
  "news/loadEconomicCalendarEvents",
  async ({ start, calendarType, secId }, thunkAPI) =>
    await handleThunkError(thunkAPI, newsApi.getEconomicCalendarEvents(start, calendarType, secId))
);

export const newsSlice = createSlice({
  name: "news",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadNews.pending as any]: (state: NewsState) => {
      state.news = [];
      state.newsLoading = LoadingState.LOADING;
    },
    [loadNews.fulfilled as any]: (
      state: NewsState,
      action: PayloadAction<NewsItem[]>
    ) => {
      state.news = action.payload;
      state.newsLoading = LoadingState.LOADED;
    },
    [loadNews.rejected as any]: (
      state: NewsState,
      action: PayloadAction<any>
    ) => {
      state.newsLoadingError = action.payload;
      state.newsLoading = LoadingState.ERROR;
    },

    [loadEconomicCalendarEvents.pending as any]: (state: NewsState) => {
      state.economicCalendarEvents = [];
      state.economicCalendarEventsLoading = LoadingState.LOADING;
    },
    [loadEconomicCalendarEvents.fulfilled as any]: (
      state: NewsState,
      action: PayloadAction<EconomicCalendarEvent[]>
    ) => {
      state.economicCalendarEvents = action.payload;
      state.economicCalendarEventsLoading = LoadingState.LOADED;
    },
    [loadEconomicCalendarEvents.rejected as any]: (
      state: NewsState,
      action: PayloadAction<any>
    ) => {
      state.economicCalendarEventsLoadingError = action.payload;
      state.economicCalendarEventsLoading = LoadingState.ERROR;
    },

  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNews = createSelector(
  (state: RootState) => ({
    news: state.news.news,
    newsLoading: state.news.newsLoading,
    newsLoadingError: state.news.newsLoadingError,
  }),
  (state) => state
);

export const selectEconomicCalendarEvents = createSelector(
  (state: RootState) => ({
    economicCalendarEvents: state.news.economicCalendarEvents,
    economicCalendarEventsLoading: state.news.economicCalendarEventsLoading,
    economicCalendarEventsLoadingError: state.news.economicCalendarEventsLoadingError,
  }),
  (state) => state
);

export default newsSlice.reducer;