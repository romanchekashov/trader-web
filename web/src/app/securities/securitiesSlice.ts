import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import analysisRestApi from "../../common/api/rest/analysisRestApi";
import { SecurityLastInfo } from "../../common/data/security/SecurityLastInfo";
import { LoadingState } from "../LoadingState";
import { handleThunkError } from "../reduxUtils";
import { RootState } from "../store";

export interface SecuritiesState {
  security?: SecurityLastInfo;
  securities: SecurityLastInfo[];
  securitiesLoading: LoadingState;
  securitiesLoadingError?: string;
}

const initialState: SecuritiesState = {
  securities: [],
  securitiesLoading: LoadingState.IDLE,
};

// https://www.newline.co/@bespoyasov/how-to-use-thunks-with-redux-toolkit-and-typescript--1e65fc64
export const loadLastSecurities = createAsyncThunk<SecurityLastInfo[]>(
  "securities/loadLastSecurities",
  async (_, thunkAPI) =>
    await handleThunkError(thunkAPI, analysisRestApi.getLastSecurities())
);

export const securitiesSlice = createSlice({
  name: "securities",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSecurityById: (
      state,
      { payload }: PayloadAction<number | undefined>
    ) => {
      if (payload && state.securities.length > 0) {
        state.security = state.securities.find(({ id }) => id === payload);
      } else {
        state.security = undefined;
      }
    },
    setSecurities: (state, { payload }: PayloadAction<SecurityLastInfo[]>) => {
      state.securities = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    // fetch securities
    [loadLastSecurities.pending as any]: (state: SecuritiesState) => {
      state.securities = [];
      state.securitiesLoading = LoadingState.LOADING;
    },
    [loadLastSecurities.fulfilled as any]: (
      state: SecuritiesState,
      action: PayloadAction<SecurityLastInfo[]>
    ) => {
      state.securities = action.payload;
      state.securitiesLoading = LoadingState.LOADED;
    },
    [loadLastSecurities.rejected as any]: (
      state: SecuritiesState,
      action: PayloadAction<any>
    ) => {
      state.securitiesLoadingError = action.payload;
      state.securitiesLoading = LoadingState.ERROR;
    },
  },
});

export const { setSecurityById, setSecurities } = securitiesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSecurities = createSelector(
  (state: RootState) => ({
    security: state.securities.security,
    securities: state.securities.securities,
  }),
  (state) => state
);

export default securitiesSlice.reducer;
