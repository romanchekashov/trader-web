import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { SecurityLastInfo } from "../../common/data/security/SecurityLastInfo";
import { RootState } from "../store";

export interface SecuritiesState {
  security?: SecurityLastInfo;
}

const initialState: SecuritiesState = {};

// https://www.newline.co/@bespoyasov/how-to-use-thunks-with-redux-toolkit-and-typescript--1e65fc64
// export const fetchCards = createAsyncThunk<CardDto[]>(
//   "cards/fetchCards",
//   async (_, thunkAPI) => await handleThunkError(thunkAPI, cardApi.getCards())
// );

// export const createCard = createAsyncThunk<CardDto, CardDto>(
//   "cards/createCard",
//   async (card, thunkAPI) =>
//     await handleThunkError(thunkAPI, cardApi.createCard(card))
// );

export const securitiesSlice = createSlice({
  name: "securities",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSecurity: (
      state,
      { payload }: PayloadAction<SecurityLastInfo | undefined>
    ) => {
      state.security = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    // fetch cards
    // [fetchCards.pending as any]: (state: CardsState) => {
    //   state.cards = [];
    //   state.cardsLoading = LoadingState.LOADING;
    // },
    // [fetchCards.fulfilled as any]: (
    //   state: CardsState,
    //   action: PayloadAction<CardDto[]>
    // ) => {
    //   state.cards = action.payload;
    //   state.cardsLoading = LoadingState.LOADED;
    // },
    // [fetchCards.rejected as any]: (
    //   state: CardsState,
    //   action: PayloadAction<any>
    // ) => {
    //   state.cardsLoadingError = action.payload;
    //   state.cardsLoading = LoadingState.ERROR;
    // },
  },
});

export const { setSecurity } = securitiesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSecurities = createSelector(
  (state: RootState) => ({
    security: state.securities.security,
  }),
  (state) => state
);

export default securitiesSlice.reducer;
