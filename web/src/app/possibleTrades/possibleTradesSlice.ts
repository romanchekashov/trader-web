import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { LoadingState } from "../../app/LoadingState";
import { handleThunkError } from "../../app/reduxUtils";
import { RootState } from "../../app/store";
import { PossibleTrade } from "./data/PossibleTrade";
import { PossibleTradeRequest } from "./data/PossibleTradeRequest";
import possibleTradesApi from "./possibleTradesApi";

export interface PossibleTradesState {
  possibleTrade?: PossibleTrade;
  possibleTradeLoading: LoadingState;
  possibleTradeLoadingError?: string;
}

export const initialState: PossibleTradesState = {
  possibleTradeLoading: LoadingState.IDLE,
};

export const loadPossibleTrade = createAsyncThunk<
  PossibleTrade,
  PossibleTradeRequest
>(
  "possibleTrades/loadPossibleTrade",
  async (possibleTradeRequest, thunkAPI) =>
    await handleThunkError(
      thunkAPI,
      possibleTradesApi.getPossibleTrade(possibleTradeRequest)
    )
);

export const possibleTradesSlice = createSlice({
  name: "possibleTrades",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPossibleTrade: (state, { payload }: PayloadAction<PossibleTrade>) => {
      state.possibleTrade = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadPossibleTrade.pending as any]: (state: PossibleTradesState) => {
      state.possibleTrade = undefined;
      state.possibleTradeLoading = LoadingState.LOADING;
    },
    [loadPossibleTrade.fulfilled as any]: (
      state: PossibleTradesState,
      action: PayloadAction<PossibleTrade>
    ) => {
      state.possibleTrade = action.payload;
      state.possibleTradeLoading = LoadingState.LOADED;
    },
    [loadPossibleTrade.rejected as any]: (
      state: PossibleTradesState,
      action: PayloadAction<any>
    ) => {
      state.possibleTradeLoadingError = action.payload;
      state.possibleTradeLoading = LoadingState.ERROR;
    },
  },
});

export const { setPossibleTrade } = possibleTradesSlice.actions;

export const selectPossibleTrade = createSelector(
  (state: RootState) => ({
    possibleTrade: state.possibleTrades.possibleTrade,
    possibleTradeLoading: state.possibleTrades.possibleTradeLoading,
    possibleTradeLoadingError: state.possibleTrades.possibleTradeLoadingError,
  }),
  (state) => state
);

export default possibleTradesSlice.reducer;
