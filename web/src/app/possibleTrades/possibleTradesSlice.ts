import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { LoadingState } from "../../app/LoadingState";
import { handleThunkError } from "../../app/reduxUtils";
import { RootState } from "../../app/store";
import { FilterDto } from "../../common/data/FilterDto";
import { PossibleTrade } from "./data/PossibleTrade";
import { PossibleTradeRequest } from "./data/PossibleTradeRequest";
import { PossibleTradeResult } from "./data/PossibleTradeResult";
import possibleTradesApi from "./possibleTradesApi";

export interface PossibleTradesState {
  possibleTrade?: PossibleTrade;
  possibleTradeLoading: LoadingState;
  possibleTradeLoadingError?: string;

  tradePossibleTradeLoading: LoadingState;
  tradePossibleTradeLoadingError?: string;

  possibleTradesStat: PossibleTradeResult[];
}

export const initialState: PossibleTradesState = {
  possibleTradeLoading: LoadingState.IDLE,
  tradePossibleTradeLoading: LoadingState.IDLE,
  possibleTradesStat: [],
};

export const loadPossibleTrade = createAsyncThunk<
  PossibleTrade,
  PossibleTradeRequest
>(
  "possibleTrades/loadPossibleTrade",
  async (possibleTradeRequest, thunkAPI) =>
    await handleThunkError(
      thunkAPI,
      possibleTradesApi.getPossibleTrade(possibleTradeRequest)
    )
);

export const tradePossibleTrade = createAsyncThunk<
  PossibleTrade,
  PossibleTradeRequest
>(
  "possibleTrades/tradePossibleTrade",
  async (possibleTradeRequest, thunkAPI) =>
    await handleThunkError(
      thunkAPI,
      possibleTradesApi.tradePossibleTrade(possibleTradeRequest)
    )
);

export const loadPossibleTradesStat = createAsyncThunk<
  PossibleTradeResult[],
  FilterDto
>(
  "possibleTrades/loadPossibleTradesStat",
  async (filter, thunkAPI) =>
    await handleThunkError(
      thunkAPI,
      possibleTradesApi.getPossibleTradesStat(filter)
    )
);

export const possibleTradesSlice = createSlice({
  name: "possibleTrades",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPossibleTrade: (state, { payload }: PayloadAction<PossibleTrade>) => {
      state.possibleTrade = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadPossibleTrade.pending as any]: (state: PossibleTradesState) => {
      state.possibleTrade = undefined;
      state.possibleTradeLoading = LoadingState.LOADING;
    },
    [loadPossibleTrade.fulfilled as any]: (
      state: PossibleTradesState,
      action: PayloadAction<PossibleTrade>
    ) => {
      state.possibleTrade = action.payload;
      state.possibleTradeLoading = LoadingState.LOADED;
    },
    [loadPossibleTrade.rejected as any]: (
      state: PossibleTradesState,
      action: PayloadAction<any>
    ) => {
      state.possibleTradeLoadingError = action.payload;
      state.possibleTradeLoading = LoadingState.ERROR;
    },
    // make real trade
    [tradePossibleTrade.pending as any]: (state: PossibleTradesState) => {
      state.possibleTrade = undefined;
      state.tradePossibleTradeLoading = LoadingState.LOADING;
    },
    [tradePossibleTrade.fulfilled as any]: (
      state: PossibleTradesState,
      action: PayloadAction<PossibleTrade>
    ) => {
      state.possibleTrade = action.payload;
      state.tradePossibleTradeLoading = LoadingState.LOADED;
    },
    [tradePossibleTrade.rejected as any]: (
      state: PossibleTradesState,
      action: PayloadAction<any>
    ) => {
      state.tradePossibleTradeLoadingError = action.payload;
      state.tradePossibleTradeLoading = LoadingState.ERROR;
    },

    [loadPossibleTradesStat.fulfilled as any]: (
      state: PossibleTradesState,
      action: PayloadAction<PossibleTradeResult[]>
    ) => {
      state.possibleTradesStat = action.payload;
    },
  },
});

export const { setPossibleTrade } = possibleTradesSlice.actions;

export const selectPossibleTrade = createSelector(
  (state: RootState) => ({
    possibleTrade: state.possibleTrades.possibleTrade,
    possibleTradeLoading: state.possibleTrades.possibleTradeLoading,
    possibleTradeLoadingError: state.possibleTrades.possibleTradeLoadingError,
  }),
  (state) => state
);

export const selectTradePossibleTrade = createSelector(
  (state: RootState) => ({
    possibleTrade: state.possibleTrades.possibleTrade,
    tradePossibleTradeLoading: state.possibleTrades.tradePossibleTradeLoading,
    tradePossibleTradeLoadingError:
      state.possibleTrades.tradePossibleTradeLoadingError,
  }),
  (state) => state
);

export const selectPossibleTradesStat = createSelector(
  (state: RootState) => ({
    possibleTradesStat: state.possibleTrades.possibleTradesStat,
  }),
  (state) => state
);

export default possibleTradesSlice.reducer;
