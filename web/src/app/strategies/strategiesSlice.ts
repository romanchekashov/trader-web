import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { TradingStrategyResult } from "../../common/data/history/TradingStrategyResult";
import { Page } from "../../common/data/Page";
import { TradingStrategyStatus } from "../../common/data/trading/TradingStrategyStatus";
import { LoadingState } from "../LoadingState";
import { handleThunkError } from "../reduxUtils";
import { RootState } from "../store";
import strategiesApi from "./strategiesApi";

export interface StrategiesState {
  strategyResults: Page<TradingStrategyResult>;
  strategyResultsLoading: LoadingState;
  strategyResultsLoadingError?: string;

  strategyResultsHistory: Page<TradingStrategyResult>;
  strategyResultsHistoryLoading: LoadingState;
  strategyResultsHistoryLoadingError?: string;
}

export const initialState: StrategiesState = {
  strategyResults: {
    content: [],
    first: false,
    last: false,
    totalElements: 0,
    totalPages: 0
  },
  strategyResultsLoading: LoadingState.IDLE,

  strategyResultsHistory: {
    content: [],
    first: false,
    last: false,
    totalElements: 0,
    totalPages: 0
  },
  strategyResultsHistoryLoading: LoadingState.IDLE
};

export const loadStrategies = createAsyncThunk<Page<TradingStrategyResult>, { page: number, size: number }>(
  "strategies/loadStrategies",
  async (data, thunkAPI) =>
    await handleThunkError(thunkAPI, strategiesApi.getAllStrategies(TradingStrategyStatus.RUNNING, data.page, data.size))
);

export const loadStrategiesHistory = createAsyncThunk<Page<TradingStrategyResult>, { page: number, size: number }>(
  "strategies/loadStrategiesHistory",
  async (data, thunkAPI) =>
    await handleThunkError(thunkAPI, strategiesApi.getAllStrategies(TradingStrategyStatus.FINISHED, data.page, data.size))
);

export const strategiesSlice = createSlice({
  name: "strategies",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // setStops: (state, { payload }: PayloadAction<StopOrder[]>) => {
    //   state.stops = payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadStrategies.pending as any]: (state: StrategiesState) => {
      state.strategyResultsLoading = LoadingState.LOADING;
    },
    [loadStrategies.fulfilled as any]: (
      state: StrategiesState,
      action: PayloadAction<Page<TradingStrategyResult>>
    ) => {
      action.payload.content.sort((a, b) => b.tradingStrategyData.id - a.tradingStrategyData.id);
      state.strategyResults = action.payload;
      state.strategyResultsLoading = LoadingState.LOADED;
    },
    [loadStrategies.rejected as any]: (
      state: StrategiesState,
      action: PayloadAction<any>
    ) => {
      state.strategyResultsLoadingError = action.payload;
      state.strategyResultsLoading = LoadingState.ERROR;
    },
    // history
    [loadStrategiesHistory.pending as any]: (state: StrategiesState) => {
      state.strategyResultsHistoryLoading = LoadingState.LOADING;
    },
    [loadStrategiesHistory.fulfilled as any]: (
      state: StrategiesState,
      action: PayloadAction<Page<TradingStrategyResult>>
    ) => {
      action.payload.content.sort((a, b) => b.tradingStrategyData.id - a.tradingStrategyData.id);
      state.strategyResultsHistory = action.payload;
      state.strategyResultsHistoryLoading = LoadingState.LOADED;
    },
    [loadStrategiesHistory.rejected as any]: (
      state: StrategiesState,
      action: PayloadAction<any>
    ) => {
      state.strategyResultsHistoryLoadingError = action.payload;
      state.strategyResultsHistoryLoading = LoadingState.ERROR;
    },
  },
});

export const { } = strategiesSlice.actions;

export const selectStrategies = createSelector(
  (state: RootState) => ({
    strategyResults: state.strategies.strategyResults,
    strategyResultsLoading: state.strategies.strategyResultsLoading,
    strategyResultsLoadingError: state.strategies.strategyResultsLoadingError,

    strategyResultsHistory: state.strategies.strategyResultsHistory,
    strategyResultsHistoryLoading: state.strategies.strategyResultsHistoryLoading,
    strategyResultsHistoryLoadingError: state.strategies.strategyResultsHistoryLoadingError,
  }),
  (state) => state
);

export default strategiesSlice.reducer;
