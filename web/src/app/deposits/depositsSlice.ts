import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { FuturesClientLimit } from "../../common/data/FuturesClientLimit";
import { LoadingState } from "../LoadingState";
import { handleThunkError } from "../reduxUtils";
import { RootState } from "../store";
import depositsApi from "./depositsApi";

export interface DepositsState {
  futuresClientLimits: FuturesClientLimit[];
  futuresClientLimitsLoading: LoadingState;
  futuresClientLimitsLoadingError?: string;
}

export const initialState: DepositsState = {
  futuresClientLimits: [],
  futuresClientLimitsLoading: LoadingState.IDLE,
};

export const loadFuturesClientLimits = createAsyncThunk<FuturesClientLimit[]>(
  "deposits/loadFuturesClientLimits",
  async (_, thunkAPI) =>
    await handleThunkError(thunkAPI, depositsApi.getFuturesLimits())
);

export const depositsSlice = createSlice({
  name: "deposits",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setDeposits: (state, { payload }: PayloadAction<FuturesClientLimit[]>) => {
      state.futuresClientLimits = payload.filter(
        (value) => value.limit_type === 0
      );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadFuturesClientLimits.pending as any]: (state: DepositsState) => {
      // state.futuresClientLimits = [];
      state.futuresClientLimitsLoading = LoadingState.LOADING;
    },
    [loadFuturesClientLimits.fulfilled as any]: (
      state: DepositsState,
      action: PayloadAction<FuturesClientLimit[]>
    ) => {
      state.futuresClientLimits = action.payload.filter(
        (value) => value.limit_type === 0
      );
      state.futuresClientLimitsLoading = LoadingState.LOADED;
    },
    [loadFuturesClientLimits.rejected as any]: (
      state: DepositsState,
      action: PayloadAction<any>
    ) => {
      state.futuresClientLimitsLoadingError = action.payload;
      state.futuresClientLimitsLoading = LoadingState.ERROR;
    },
  },
});

export const { setDeposits } = depositsSlice.actions;

export const selectDeposits = createSelector(
  (state: RootState) => ({
    futuresClientLimits: state.deposits.futuresClientLimits,
    futuresClientLimitsLoading: state.deposits.futuresClientLimitsLoading,
    futuresClientLimitsLoadingError:
      state.deposits.futuresClientLimitsLoadingError,
  }),
  (state) => state
);

export default depositsSlice.reducer;
